using ComputerVision
using Test
using StaticArrays
using GeometryTypes
using LinearAlgebra
using PGFPlotsX
using Makie
using Colors


planes = [2]
roi_dimensions = [[400.0, 400.0]]
noise_per_roi = [[1.0, 1.0]]
points_per_roi = [[24, 24]]
replications = 1
trials = 1

simulation_setup = VaryPlanesSimulationSetup(planes = planes,
                                             roi_dimensions = roi_dimensions,
                                             noise_per_roi = noise_per_roi,
                                             points_per_roi = points_per_roi,
                                             replications = replications,
                                             trials = trials)
experiment_conditions = construct_simulation_data(simulation_setup)
experiment_context = experiment_conditions[1][1]
synthetic_scene = experiment_context.synthetic_scene
world = synthetic_scene.world
cameras = synthetic_scene.cameras
camera‚ÇÅ, camera‚ÇÇ = cameras
aquire = AquireImageContext()
‚Ñ≥ = aquire(world, camera‚ÇÅ)
‚Ñ≥‚Ä≤ = aquire(world, camera‚ÇÇ)

axis = Scene()
visualize = VisualizeWorldContext(; scene = axis, visual_properties = MakieVisualProperties(scale = 150, markersize = 25))
visualize(world, cameras)
scene = get_scene(visualize)
display(scene)

structure_allotment = [get_interval(world.groups[i]) for i = 1:length(world.groups)]
correspondences = Correspondences(tuple(‚Ñ≥,‚Ñ≥‚Ä≤))

œÉ = 1
œÉ¬≤ = œÉ^2
apply_noise = ApplyNoiseContext(perturb = HomogeneousGaussianNoise(œÉ))
noisy_correspondences = first(apply_noise(world, camera‚ÇÅ, camera‚ÇÇ))
estimate_context = EstimateHomographyContext()

objective = ApproximateMaximumLikelihood()
solver = FundamentalNumericalScheme()
seed_estimator = ProjectiveEstimationAlgorithm(; objective = objective, solver = solver)
#estimator = ProjectiveEstimationAlgorithm(Mahalanobis(), ConstrainedMahalanobis(; seed_estimator = seed_estimator), true)
estimator = ProjectiveEstimationAlgorithm(Mahalanobis(), ConstrainedMahalanobis(; seed_estimator = seed_estimator, constraints = ExplicitChojnackiSzpak()), true)


#estimator = ProjectiveEstimationAlgorithm(AlgebraicLeastSquares(), DirectLinearTransform(), true)
#estimator = ProjectiveEstimationAlgorithm(ApproximateMaximumLikelihood(), FundamentalNumericalScheme(), true)
#estimator = ProjectiveEstimationAlgorithm(ReprojectionError(), BundleAdjustment(ProjectiveEstimationAlgorithm()), true)
#f = estimate_context(noisy_correspondences,  estimator)
#f = estimate_context(noisy_correspondences,  estimator)

# ConstrainedBundleAdjustment()
# seed_estimator = ProjectiveEstimationAlgorithm()
# estimator = ProjectiveEstimationAlgorithm(ReprojectionError(), ConstrainedBundleAdjustment(), true)
f = estimate_context(noisy_correspondences,  structure_allotment,  estimator)

typeof(ConstrainedBundleAdjustment()) <: ComputerVision.AbstractConstrainedProjectiveOptimizationScheme

#f = estimate_context(context.correspondences[1], structure_allotment, ConstrainedBundleAdjustment(DirectLinearTransform()))
#f = estimate_context(correspondences‚ÇÄ, structure_allotment, ConstrainedBundleAdjustment(DirectLinearTransform()))
#g = estimate_context(correspondences‚ÇÅ, structure_allotment, ConstrainedBundleAdjustment(DirectLinearTransform()))

#f = estimate_context(noisy_correspondences, structure_allotment, ConstrainedBundleAdjustment(DirectLinearTransform(), ExplicitChojnackiSzpak()))
#f = estimate_context(noisy_correspondences, structure_allotment, ConstrainedMahalanobis(DirectLinearTransform(), ImplicitChojnackiSzpak()))


Œò = [vec(f[1]), vec(f[2])]
cost_context = CostContext(ApproximateMaximumLikelihood(), EstimateHomographyContext())
cost = cost_context(Œò, structure_allotment, noisy_correspondences)
sqrt(cost[2] / (24-8))

uncertainty_context = UncertaintyContext()

npts = first(sum.(points_per_roi))
Œõ = [SMatrix{2,2}(œÉ¬≤ * Matrix(Diagonal([1.0,1.0]))) for i = 1:npts]
Œõ‚Ä≤ = [SMatrix{2,2}(œÉ¬≤ * Matrix(Diagonal([1.0,1.0]))) for i = 1:npts]
ùö≤ = Correspondences(tuple(Œõ, Œõ‚Ä≤))
uncertainty_context([HomographyMatrix(f[1]), HomographyMatrix(f[2])],structure_allotment, noisy_correspondences, ùö≤)




ùêÖ = matrix(FundamentalMatrix( camera‚ÇÅ, camera‚ÇÇ))
H‚ÇÄ = f[1]/ norm(f[1])
H‚ÇÅ = f[2]/ norm(f[2])
H‚ÇÄ' * ùêÖ + ùêÖ'*H‚ÇÄ
H‚ÇÅ' * ùêÖ + ùêÖ'*H‚ÇÅ


eigen(Array(inv(H‚ÇÄ) * ùêÖ))
eigen(Array(inv(H‚ÇÅ) * ùêÖ))

eigen(Array(30*ùêÖ * inv(H‚ÇÄ)))

eigen(Array(inv(H‚ÇÅ) * ùêÖ * inv(H‚ÇÅ)))


e = (eigen(Array(inv(H‚ÇÄ) * H‚ÇÅ)))
real.(e.values)


s‚ÇÄ = structure_allotment[1]
s‚ÇÅ = structure_allotment[2]
H‚ÇÄ = estimate_context(Correspondences(tuple(‚Ñ≥[s‚ÇÄ], ‚Ñ≥‚Ä≤[s‚ÇÄ])), DirectLinearTransform())
H‚ÇÅ = estimate_context(Correspondences(tuple(‚Ñ≥[s‚ÇÅ], ‚Ñ≥‚Ä≤[s‚ÇÅ])), DirectLinearTransform())


ùí´‚ÇÄ = noisy_correspondences[1][s‚ÇÄ]
ùí´‚ÇÄ‚Ä≤ = noisy_correspondences[2][s‚ÇÄ]

ùí´‚ÇÅ  = noisy_correspondences[1][s‚ÇÅ]
ùí´‚ÇÅ‚Ä≤ = noisy_correspondences[2][s‚ÇÅ]

# G‚ÇÄ = estimate_context(Correspondences(tuple(noisy_correspondences[1][s‚ÇÄ], noisy_correspondences[2][s‚ÇÄ])),  DirectLinearTransform())
# G‚ÇÅ = estimate_context(Correspondences(tuple(noisy_correspondences[1][s‚ÇÅ], noisy_correspondences[2][s‚ÇÅ])),  DirectLinearTransform())
# G‚ÇÄ = estimate_context(Correspondences(tuple(ùí´‚ÇÄ, ùí´‚ÇÄ‚Ä≤)),  DirectLinearTransform())
# G‚ÇÅ = estimate_context(Correspondences(tuple(ùí´‚ÇÅ , ùí´‚ÇÅ‚Ä≤)),  DirectLinearTransform())
G‚ÇÄ = estimate_context(Correspondences(tuple(ùí´‚ÇÄ, ùí´‚ÇÄ‚Ä≤)),  BundleAdjustment(DirectLinearTransform()))
G‚ÇÅ = estimate_context(Correspondences(tuple(ùí´‚ÇÅ , ùí´‚ÇÅ‚Ä≤)),  BundleAdjustment(DirectLinearTransform()))

H‚ÇÄ / norm(H‚ÇÄ)
H‚ÇÅ / norm(H‚ÇÅ)





G‚ÇÄ / norm(G‚ÇÄ)
G‚ÇÅ / norm(G‚ÇÅ)

score = zeros(length(ùí´‚ÇÄ))
for n = 1:length(ùí´‚ÇÄ)
    ùê¶ = hom(ùí´‚ÇÄ[n])
    m‚Ä≤ = ùí´‚ÇÄ‚Ä≤[n]
    #ùê≤ = hom‚Åª¬π(H‚ÇÄ  * ùê¶)
    ùê≤ = hom‚Åª¬π(G‚ÇÄ  * ùê¶)
    @show m‚Ä≤, ùê≤, norm(m‚Ä≤ - ùê≤)^2
end

for n = 1:length(ùí´‚ÇÅ)
    ùê¶ = hom(ùí´‚ÇÅ[n])
    m‚Ä≤ = ùí´‚ÇÅ‚Ä≤[n]
    #ùê≤ = hom‚Åª¬π(H‚ÇÄ  * ùê¶)
    ùê≤ = hom‚Åª¬π(G‚ÇÅ   * ùê¶)
    @show m‚Ä≤, ùê≤, norm(m‚Ä≤ - ùê≤)^2
end
#correspondences‚ÇÄ

# Visualize the set of corresponding points
M‚ÇÄ = reshape(reinterpret(Float64,‚Ñ≥[s‚ÇÄ]),(2,length(‚Ñ≥[s‚ÇÄ])))
M‚ÇÅ = reshape(reinterpret(Float64,‚Ñ≥[s‚ÇÅ]),(2,length(‚Ñ≥[s‚ÇÅ])))
M‚ÇÄ‚Ä≤ = reshape(reinterpret(Float64,‚Ñ≥‚Ä≤[s‚ÇÄ]),(2,length(‚Ñ≥‚Ä≤[s‚ÇÄ])))
M‚ÇÅ‚Ä≤ = reshape(reinterpret(Float64,‚Ñ≥‚Ä≤[s‚ÇÅ]),(2,length(‚Ñ≥‚Ä≤[s‚ÇÅ])))

P‚ÇÄ = reshape(reinterpret(Float64,ùí´‚ÇÄ),(2,length(ùí´‚ÇÄ)))
P‚ÇÄ‚Ä≤ = reshape(reinterpret(Float64,ùí´‚ÇÄ‚Ä≤),(2,length(ùí´‚ÇÄ‚Ä≤)))
P‚ÇÅ = reshape(reinterpret(Float64,ùí´‚ÇÅ),(2,length(ùí´‚ÇÅ)))
P‚ÇÅ‚Ä≤ = reshape(reinterpret(Float64,ùí´‚ÇÅ‚Ä≤),(2,length(ùí´‚ÇÅ‚Ä≤)))

# # Truth...
# scene = Scene()
# scatter!(scene, M‚ÇÄ[1,:], M‚ÇÄ[2,:], markersize = 10, color = :red, limits = FRect(-320, -200, 640, 480.0))
# scatter!(scene, M‚ÇÅ[1,:], M‚ÇÅ[2,:], markersize = 10, color = :blue, limits = FRect(-320, -200, 640, 480.0))
#
# scatter!(scene, M‚ÇÄ‚Ä≤[1,:], M‚ÇÄ‚Ä≤[2,:], markersize = 10, color = :green, limits = FRect(-320, -200, 640, 480.0))
# scatter!(scene, M‚ÇÅ‚Ä≤[1,:], M‚ÇÅ‚Ä≤[2,:], markersize = 10, color = :black, limits = FRect(-320, -200, 640, 480.0))


scene = Scene()
scatter!(scene, M‚ÇÄ[1,:], M‚ÇÄ[2,:], markersize = 10, color = :red, limits = FRect(-320, -200, 640, 480.0))
scatter!(scene, M‚ÇÅ[1,:], M‚ÇÅ[2,:], markersize = 10, color = :blue, limits = FRect(-320, -200, 640, 480.0))

scatter!(scene, P‚ÇÄ[1,:],P‚ÇÄ[2,:], markersize = 10, color = :green, limits = FRect(-320, -200, 640, 480.0))
scatter!(scene, P‚ÇÅ[1,:], P‚ÇÅ[2,:], markersize = 10, color = :black, limits = FRect(-320, -200, 640, 480.0))


scene = Scene()
scatter!(scene, M‚ÇÄ‚Ä≤[1,:], M‚ÇÄ‚Ä≤[2,:], markersize = 10, color = :red, limits = FRect(-320, -200, 640, 480.0))
scatter!(scene, M‚ÇÅ‚Ä≤[1,:], M‚ÇÅ‚Ä≤[2,:], markersize = 10, color = :blue, limits = FRect(-320, -200, 640, 480.0))

scatter!(scene, P‚ÇÄ‚Ä≤[1,:],P‚ÇÄ‚Ä≤[2,:], markersize = 10, color = :green, limits = FRect(-320, -200, 640, 480.0))
scatter!(scene, P‚ÇÅ‚Ä≤[1,:], P‚ÇÅ‚Ä≤[2,:], markersize = 10, color = :black, limits = FRect(-320, -200, 640, 480.0))


noisy_correspondences

ùêà‚ÇÉ = SMatrix{3,3}(1.0I)

kron(b, ones(3,3))


a = zeros(9,12)
b = ones(9,3)
k = 4
s = (k-1) * 3 + 1
e = s + 2
a[:,s:e] .= b

a
