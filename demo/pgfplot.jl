using ComputerVision
using Test
using StaticArrays
using GeometryTypes
using LinearAlgebra
using PGFPlotsX
#using Makie
#using Makie # You have to add this as a dependency to your environment.

# points = [Point3(rand(0:1000.0), rand(-1000.0:1000.0), 1000.0) for n = 1:250]
# planes = [Plane(Vec3(0.0, 0.0, 1.0), 1000)]

# points‚ÇÅ = [Point3(0.0, rand(-1000.0:1000.0), rand(0:1000.0)) for n = 1:250]
# planes‚ÇÅ = [Plane(Vec3(1.0, 0.0, 0.0), 0)]
#
# points‚ÇÇ = [Point3(rand(0:1000.0), rand(-1000.0:1000.0), 1000.0) for n = 1:250]
# planes‚ÇÇ = [Plane(Vec3(0.0, 0.0, 1.0), 1000)]
#
# planes = vcat(planes‚ÇÅ, planes‚ÇÇ)
# points = vcat(points‚ÇÅ, points‚ÇÇ)
#
# Coordinates([])
#
# @pgf TikzPicture(
#         Axis(
#             PlotInc({ only_marks },
#                 Table(; x = 1:2, y = 3:4)),
#             PlotInc(
#                 Table(; x = 5:6, y = 1:2))))
#
# p = points‚ÇÅ[1]
#
# M‚ÇÅ = reshape(reinterpret(Float64, points‚ÇÅ),3, 250)
# x‚ÇÅ = M‚ÇÅ[1,:]
# y‚ÇÅ = M‚ÇÅ[2,:]
# z‚ÇÅ = M‚ÇÅ[3,:]
#
# M‚ÇÇ = reshape(reinterpret(Float64, points‚ÇÇ),3, 250)
# x‚ÇÇ = M‚ÇÇ[1,:]
# y‚ÇÇ = M‚ÇÇ[2,:]
# z‚ÇÇ = M‚ÇÇ[3,:]
#
# #coords = Coordinates(x, y, z)
# #col = RGB{N0f8}(1.0,1.0,0.384)
# cols = distinguishable_colors(3)
# @pgf Axis(
#     {
#
#     },
#     Plot3(
#         {
#             "only marks",
#             shader = "flat",
#             color => cols[3]
#         },
#         Table(x‚ÇÅ, y‚ÇÅ, z‚ÇÅ)
#     )
# )
#
# @pgf Plot3Inc(
#     {
#         "only marks",
#         shader = "flat",
#         color => cols[3]
#     },
#     Table(x‚ÇÇ, y‚ÇÇ, z‚ÇÇ)
# )
#
# a = @pgf Plot3(
#         {
#             "only marks",
#             shader = "flat",
#             color => cols[2]
#         },
#         Table(x‚ÇÅ, y‚ÇÅ, z‚ÇÅ)
#     )
#
# b = @pgf Plot3(
#             {
#                 "only marks",
#                 shader = "flat",
#                 color => cols[3]
#             },
#             Table(x‚ÇÇ, y‚ÇÇ, z‚ÇÇ)
#         );
#
# Axis(a,b)
#
# c =  Axis();
#
#
# a = Point3f0(0,0,0)
# b = Point3f0(1,0,0)
#
# c = [Pair(a,b)]
#
# Coordinates(c...)

 # for (i, p) in enumerate([Pair(rand(1),rand(1)), Pair(rand(1),rand(1))])
 #     @show i, p

n‚ÇÅ = [1 0 0]'
d‚ÇÅ = 0.0

n‚ÇÇ = [0 1 0]'
d‚ÇÇ = 2000.0

 K‚ÇÅ = [100 0 0; 0 100 0; 0 0 1]
 R‚ÇÅ = [0.642788 0.766044 0 ; 0 0 -1; -0.766044 0.642788 0]
 t‚ÇÅ = [3000 0 0]'

 K‚ÇÇ = [150 0 0; 0 150 0; 0 0 1]

 R‚ÇÇ = [0.34202 0.939693 0 ; 0 0 -1; -0.939693 0.34202  0]

 t‚ÇÇ = [4000 0 0 ]';

P‚ÇÅ =  K‚ÇÅ*R‚ÇÅ*[1 0 0 -3000; 0 1 0 0; 0 0 1 0]
Projection(camera‚ÇÅ)

P‚ÇÇ =  K‚ÇÇ*R‚ÇÇ*[1 0 0 -4000; 0 1 0 0; 0 0 1 0]


Projection(camera‚ÇÇ)




H‚ÇÅ = (d‚ÇÅ - dot(n‚ÇÅ,t‚ÇÅ))* K‚ÇÇ*R‚ÇÇ/R‚ÇÅ/K‚ÇÅ + K‚ÇÇ*R‚ÇÇ*(t‚ÇÅ - t‚ÇÇ) * (inv(K‚ÇÅ')*R‚ÇÅ*n‚ÇÅ)'

H‚ÇÇ = (d‚ÇÇ - dot(n‚ÇÇ,t‚ÇÅ))* K‚ÇÇ*R‚ÇÇ/R‚ÇÅ/K‚ÇÅ + K‚ÇÇ*R‚ÇÇ*(t‚ÇÅ - t‚ÇÇ) * (inv(K‚ÇÅ')*R‚ÇÅ*n‚ÇÇ)'


F = vec2antisym(K‚ÇÇ*R‚ÇÇ*(t‚ÇÅ - t‚ÇÇ)) * K‚ÇÇ * R‚ÇÇ / R‚ÇÅ / K‚ÇÅ


H‚ÇÅ = H‚ÇÅ / norm(H‚ÇÅ)
H‚ÇÇ = H‚ÇÇ / norm(H‚ÇÇ)

H‚ÇÅ' * F + F'*H‚ÇÅ

H‚ÇÇ' * F + F'*H‚ÇÇ

# ùêá'*ùêÖ + ùêÖ'*ùêá

H‚ÇÇ / H‚ÇÇ[3,3]



ùêá‚ÇÇ / ùêá‚ÇÇ[3,3]





K‚ÇÇ*R‚ÇÇ*(t‚ÇÅ - t‚ÇÇ)


(d‚ÇÅ - dot(n‚ÇÅ,t‚ÇÅ))

(d‚ÇÅ - n‚ÇÅ'*t‚ÇÅ)

K‚ÇÇ*R‚ÇÇ/R‚ÇÅ/K‚ÇÅ

K‚ÇÇ*R‚ÇÇ*(t‚ÇÅ - t‚ÇÇ)

inv(K‚ÇÅ')*R‚ÇÅ*n‚ÇÅ


Q, q = ascertain_pose(camera‚ÇÇ, CartesianSystem(Vec(1.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0)))
Q'




 R‚ÇÇ
