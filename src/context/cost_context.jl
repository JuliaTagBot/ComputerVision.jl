abstract type AbstractCostContext end

struct CostContext{T‚ÇÅ <: AbstractCost, T‚ÇÇ <: AbstractEstimationContext} <: AbstractCostContext
    cost::T‚ÇÅ
    estimation_context::T‚ÇÇ
end

function (context::CostContext)(Œò::AbstractVector, structure_allotment::AbstractVector,  correspondences::AbstractCorrespondences)
    s = structure_allotment
    [context(Œò[i], extract_subset(correspondences, s[i])) for i = 1:length(s)]
end


# TODO add version which takes covariance matrices as an additional parameter
function (context::CostContext)(ùõâ::AbstractVector, correspondences::AbstractCorrespondences)
    N = length(correspondences[1])
    # Construct default covariance matrices (identity)
    Œõ = [SMatrix{2,2,Float64,4}(1, 0, 0 ,1) for n = 1:N]
    Œõ‚Ä≤ = [SMatrix{2,2,Float64,4}(1, 0, 0 ,1) for n = 1:N]
    covariance_matrices = Correspondences(tuple(Œõ, Œõ‚Ä≤))
    evaluate_cost(context.cost, context.estimation_context, ùõâ, correspondences, covariance_matrices)
end

function evaluate_cost(cost::ApproximateMaximumLikelihood, estimation_context::EstimateHomographyContext, ùõâ::AbstractVector, correspondences::AbstractCorrespondences, covariance_matrices::AbstractCorrespondences)
    ‚Ñ≥ = correspondences[1]
    ‚Ñ≥‚Ä≤ = correspondences[2]
    Œõ = covariance_matrices[1]
    Œõ‚Ä≤ = covariance_matrices[2]
    J‚Çê‚Çò‚Çó = 0.0
    N = length(‚Ñ≥)
    ùö≤‚Çô = @MMatrix zeros(4,4)
    ùêû‚ÇÅ = @SVector [1.0, 0.0, 0.0]
    ùêû‚ÇÇ = @SVector [0.0, 1.0, 0.0]
    ùêû‚ÇÅ‚Çì = vec2antisym(ùêû‚ÇÅ)
    ùêû‚ÇÇ‚Çì = vec2antisym(ùêû‚ÇÇ)
    ùêà‚ÇÉ‚ÇÇ = @SMatrix [1.0  0.0 ; 0.0 1.0 ; 0.0 0.0]
    ùêà‚ÇÇ = @SMatrix  [1.0  0.0 ; 0.0 1.0]
    index = SVector(1,2)
    @inbounds for n = 1:N
        ùö≤‚Çô[1:2,1:2] .=  Œõ[n][index,index]
        ùö≤‚Çô[3:4,3:4] .=  Œõ‚Ä≤[n][index,index]
        ùê¶ = hom(‚Ñ≥[n])
        ùê¶ π= hom(‚Ñ≥‚Ä≤[n])
        ùê¶ π‚Çì = vec2antisym(ùê¶ π)
        ùêî‚Çô = (-ùê¶ ‚äó ùê¶ π‚Çì)
        ùêï‚Çô = ùêî‚Çô * ùêà‚ÇÉ‚ÇÇ
        ‚àÇ‚ÇìùêØ‚Çô = -hcat(vec((ùêû‚ÇÅ ‚äó ùê¶ π‚Çì)*ùêà‚ÇÉ‚ÇÇ), vec((ùêû‚ÇÇ ‚äó ùê¶ π‚Çì)*ùêà‚ÇÉ‚ÇÇ), vec((ùê¶ ‚äó ùêû‚ÇÅ‚Çì)*ùêà‚ÇÉ‚ÇÇ), vec((ùê¶ ‚äó ùêû‚ÇÇ‚Çì)*ùêà‚ÇÉ‚ÇÇ))
        ùêÅ‚Çô =  ‚àÇ‚ÇìùêØ‚Çô * ùö≤‚Çô * ‚àÇ‚ÇìùêØ‚Çô'
        ùö∫‚Çô = (ùêà‚ÇÇ ‚äó ùõâ') * ùêÅ‚Çô * (ùêà‚ÇÇ ‚äó ùõâ)
        ùö∫‚Çô‚Åª¬π = inv(ùö∫‚Çô)
        J‚Çê‚Çò‚Çó +=  ùõâ' * ùêï‚Çô * ùö∫‚Çô‚Åª¬π * ùêï‚Çô' * ùõâ
    end
    J‚Çê‚Çò‚Çó
end

# Half the gradient of the approximate maximum likelihood cost function.
# Used throughout the literature on the Fundamental Numerical Scheme.
function evaluate_ùêó(cost::ApproximateMaximumLikelihood, estimation_context::EstimateHomographyContext, ùõâ::AbstractVector, correspondences::AbstractCorrespondences, covariance_matrices::AbstractCorrespondences)
    ‚Ñ≥ = correspondences[1]
    ‚Ñ≥‚Ä≤ = correspondences[2]
    Œõ = covariance_matrices[1]
    Œõ‚Ä≤ = covariance_matrices[2]
    N = length(‚Ñ≥)
    ùö≤‚Çô = @MMatrix zeros(4,4)
    ùêû‚ÇÅ = @SVector [1.0, 0.0, 0.0]
    ùêû‚ÇÇ = @SVector [0.0, 1.0, 0.0]
    ùêû‚ÇÅ‚Çì = vec2antisym(ùêû‚ÇÅ)
    ùêû‚ÇÇ‚Çì = vec2antisym(ùêû‚ÇÇ)
    ùêç = @SMatrix zeros(9,9)
    ùêå = @SMatrix zeros(9,9)
    ùêà‚ÇÉ‚ÇÇ = @SMatrix [1.0  0.0 ; 0.0 1.0 ; 0.0 0.0]
    ùêà‚ÇÇ = @SMatrix  [1.0  0.0 ; 0.0 1.0]
    ùêà‚Çâ = SMatrix{9,9}(1.0I)
    index = SVector(1,2)
    @inbounds for n = 1:N
        ùö≤‚Çô[1:2,1:2] .=  Œõ[n][index,index]
        ùö≤‚Çô[3:4,3:4] .=  Œõ‚Ä≤[n][index,index]
        ùê¶ = hom(‚Ñ≥[n])
        ùê¶ π= hom(‚Ñ≥‚Ä≤[n])
        ùê¶ π‚Çì = vec2antisym(ùê¶ π)
        ùêî‚Çô = (-ùê¶ ‚äó ùê¶ π‚Çì)
        ùêï‚Çô = ùêî‚Çô * ùêà‚ÇÉ‚ÇÇ
        ‚àÇ‚ÇìùêØ‚Çô = -hcat(vec((ùêû‚ÇÅ ‚äó ùê¶ π‚Çì)*ùêà‚ÇÉ‚ÇÇ), vec((ùêû‚ÇÇ ‚äó ùê¶ π‚Çì)*ùêà‚ÇÉ‚ÇÇ), vec((ùê¶ ‚äó ùêû‚ÇÅ‚Çì)*ùêà‚ÇÉ‚ÇÇ), vec((ùê¶ ‚äó ùêû‚ÇÇ‚Çì)*ùêà‚ÇÉ‚ÇÇ))
        ùêÅ‚Çô =  ‚àÇ‚ÇìùêØ‚Çô * ùö≤‚Çô * ‚àÇ‚ÇìùêØ‚Çô'
        ùö∫‚Çô = (ùêà‚ÇÇ ‚äó ùõâ') * ùêÅ‚Çô * (ùêà‚ÇÇ ‚äó ùõâ)
        ùö∫‚Çô‚Åª¬π = inv(ùö∫‚Çô)
        ùõà‚Çô = ùö∫‚Çô‚Åª¬π * ùêï‚Çô' * ùõâ
        ùêç = ùêç + ((ùõà‚Çô' ‚äó ùêà‚Çâ) * ùêÅ‚Çô * (ùõà‚Çô ‚äó ùêà‚Çâ))
        ùêå = ùêå + (ùêï‚Çô * ùö∫‚Çô‚Åª¬π * ùêï‚Çô')
    end
    ùêó = ùêå - ùêç
end
