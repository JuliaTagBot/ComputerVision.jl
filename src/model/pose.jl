abstract type AbstractPose end
abstract type AbstractCoordinateTransformation end

struct RelativePose{T‚ÇÅ <: AbstractMatrix, T‚ÇÇ <: AbstractVector} <: AbstractPose
    rotation::T‚ÇÅ
    translation::T‚ÇÇ
end

function rotation(pose::AbstractPose)
    pose.rotation
end

function translation(pose::AbstractPose)
    pose.translation
end


RelativePose(camera‚ÇÅ::AbstractCamera, camera‚ÇÇ::AbstractCamera) = RelativePose(construct_relative_pose(camera‚ÇÅ, camera‚ÇÇ)...)
RelativePose(coordinate_system‚ÇÅ::CartesianSystem, coordinate_system‚ÇÇ::CartesianSystem) = RelativePose(construct_relative_pose(coordinate_system‚ÇÅ, coordinate_system‚ÇÇ)...)


function construct_relative_pose(camera‚ÇÅ::AbstractCamera, camera‚ÇÇ::AbstractCamera)
    camera_model‚ÇÅ = get_model(camera‚ÇÅ)
    camera_model‚ÇÇ = get_model(camera‚ÇÇ)
    extrinsics‚ÇÅ = get_extrinsics(camera_model‚ÇÅ)
    extrinsics‚ÇÇ = get_extrinsics(camera_model‚ÇÇ)
    camera_system‚ÇÅ = get_coordinate_system(extrinsics‚ÇÅ)
    camera_system‚ÇÇ = get_coordinate_system(extrinsics‚ÇÇ)
    construct_relative_pose(camera_system‚ÇÅ, camera_system‚ÇÇ)
    # ùêû‚ÇÅ = get_e‚ÇÅ(camera_system‚ÇÅ)
    # ùêû‚ÇÇ = get_e‚ÇÇ(camera_system‚ÇÅ)
    # ùêû‚ÇÉ = get_e‚ÇÉ(camera_system‚ÇÅ)
    # ùêû‚ÇÅ‚Ä≤ = get_e‚ÇÅ(camera_system‚ÇÇ)
    # ùêû‚ÇÇ‚Ä≤ = get_e‚ÇÇ(camera_system‚ÇÇ)
    # ùêû‚ÇÉ‚Ä≤ = get_e‚ÇÉ(camera_system‚ÇÇ)
    # ùê≠ = get_origin(camera_system‚ÇÅ) - get_origin(camera_system‚ÇÇ)
    # ùêë = inv(hcat(ùêû‚ÇÅ, ùêû‚ÇÇ, ùêû‚ÇÉ)) * hcat(ùêû‚ÇÅ‚Ä≤, ùêû‚ÇÇ‚Ä≤, ùêû‚ÇÉ‚Ä≤)
    # ùêë, ùê≠
end

# system 2 with respect to system 1
function construct_relative_pose(coordinate_system‚ÇÅ::AbstractCoordinateSystem,  coordinate_system‚ÇÇ::AbstractCoordinateSystem)
    ùêû‚ÇÅ = get_e‚ÇÅ(coordinate_system‚ÇÅ)
    ùêû‚ÇÇ = get_e‚ÇÇ(coordinate_system‚ÇÅ)
    ùêû‚ÇÉ = get_e‚ÇÉ(coordinate_system‚ÇÅ)
    ùêû‚ÇÅ‚Ä≤ = get_e‚ÇÅ(coordinate_system‚ÇÇ)
    ùêû‚ÇÇ‚Ä≤ = get_e‚ÇÇ(coordinate_system‚ÇÇ)
    ùêû‚ÇÉ‚Ä≤ = get_e‚ÇÉ(coordinate_system‚ÇÇ)
    # Mistake, change order TODO
    ùê≠ = get_origin(coordinate_system‚ÇÇ) - get_origin(coordinate_system‚ÇÅ)
    ùêë = inv(hcat(ùêû‚ÇÅ, ùêû‚ÇÇ, ùêû‚ÇÉ)) * hcat(ùêû‚ÇÅ‚Ä≤, ùêû‚ÇÇ‚Ä≤, ùêû‚ÇÉ‚Ä≤)
    ùêë, ùê≠
end

Base.@kwdef struct CoordinateTransformation{T‚ÇÅ <: AbstractCoordinateSystem, T‚ÇÇ <: AbstractCoordinateSystem} <: AbstractCoordinateTransformation
    source::T‚ÇÅ = CartesianSystem()
    target::T‚ÇÇ = CartesianSystem()
    relative_pose = RelativePose(source, target)
end

#function target(CoordinateTransformation)

function rotation(transformation::CoordinateTransformation)
    rotation(transformation.relative_pose)
end

function translation(transformation::CoordinateTransformation)
    translation(transformation.relative_pose)
end



# function get_transformation()
#
# function get_rotation()
# end
#
# function get_translation()
# end
