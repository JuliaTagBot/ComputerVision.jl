struct HomographyMatrix{T‚ÇÅ <: AbstractMatrix} <: ProjectiveEntity
    ùêá::T‚ÇÅ
end

struct HomographyMatrices{T‚ÇÅ <: AbstractVector{<: HomographyMatrix}} <: ProjectiveEntity
    ‚Ñã::T‚ÇÅ
end

function matrix(entity::HomographyMatrix)
    entity.ùêá
end

function matrices(entity::HomographyMatrices)
    map(x->matrix(x), entity.‚Ñã)
end


HomographyMatrices(camera‚ÇÅ::AbstractCamera, camera‚ÇÇ::AbstractCamera, planes::AbstractVector{<:Plane}) = HomographyMatrices(construct_homography_matrices(camera‚ÇÅ, camera‚ÇÇ, planes,  CartesianSystem(Point(0.0, 0.0, 0.0), Vec(1.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0))))

#HomographyMatrix(camera‚ÇÅ::AbstractCamera, camera‚ÇÇ::AbstractCamera, plane::Plane) = HomographyMatrix(camera‚ÇÅ, camera‚ÇÇ, plane, CartesianSystem(Point(0.0, 0.0, 0.0), Vec(1.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0)))
HomographyMatrix(camera‚ÇÅ::AbstractCamera, camera‚ÇÇ::AbstractCamera, plane::Plane) = HomographyMatrix(construct_homography_matrix(camera‚ÇÅ, camera‚ÇÇ, plane, CartesianSystem(Point(0.0, 0.0, 0.0), Vec(1.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0))))


# function construct_homography_matrices(camera‚ÇÅ::AbstractCamera, camera‚ÇÇ::AbstractCamera, planes::AbstractVector{<:Plane}, reference_system::AbstractCoordinateSystem)
#     ùêÄ, b, ùêÄ‚ÇÅ, ùêõ‚ÇÅ  = establish_inherent_homography_variables(camera‚ÇÅ, camera‚ÇÇ, reference_system)
#     ‚Ñã = [HomographyMatrix(construct_homography_matrix(ùêÄ, b, ùêÄ‚ÇÅ, b‚ÇÅ, plane[i])) for i = 1:length(planes)]
#     return ‚Ñã
# end
#
# function partition_projection_matrix(camera, reference_system)
#     P = Projection(camera, reference_system)
#     ùêè = to_matrix(P)
#     ùêÄ = ùêè[1:3,1:3]
#     ùêõ = ùêè[1:3, 4]
#     if rank(ùêÄ) != 3
#         error("The 3x3 submatrix of the projection matrix is not invertible.")
#     end
#     return ùêÄ, ùêõ
# end
#
# function establish_inherent_homography_variables(camera‚ÇÅ::AbstractCamera, camera‚ÇÇ::AbstractCamera, reference_system::AbstractCoordinateSystem)
#     ùêÄ‚ÇÅ, ùêõ‚ÇÅ = partition_projection_matrix(camera‚ÇÅ, reference_system)
#     ùêÄ‚ÇÇ, ùêõ‚ÇÇ = partition_projection_matrix(camera‚ÇÇ, reference_system)
#     ùêÄ = ùêÄ‚ÇÇ/ùêÄ‚ÇÅ
#     ùêõ = ùêõ‚ÇÇ - (ùêÄ‚ÇÇ/ùêÄ‚ÇÅ)*ùêõ‚ÇÅ
#     return ùêÄ, ùêõ, ùêÄ‚ÇÅ, ùêõ‚ÇÅ
# end
#
# function construct_homography_matrix(camera‚ÇÅ::AbstractCamera, camera‚ÇÇ::AbstractCamera, plane::Plane, reference_system::AbstractCoordinateSystem)
#     ùêÄ, ùêõ, ùêÄ‚ÇÅ, ùêõ‚ÇÅ  = establish_inherent_homography_variables(camera‚ÇÅ, camera‚ÇÇ, reference_system)
#     ùêá = construct_homography_matrix(ùêÄ, ùêõ, ùêÄ‚ÇÅ, ùêõ‚ÇÅ, plane)
#     return ùêá
# end
#
# function construct_homography_matrix(ùêÄ::AbstractArray, ùêõ::AbstractArray, ùêÄ‚ÇÅ::AbstractArray, ùêõ‚ÇÅ::AbstractArray, plane::Plane)
#     # We assume that the plane is given by the vector ùõë =[n -d], where n is the outward
#     # normal to the plane and d is the distance from the plane to the origin of the
#     # coordinate system.
#     ùêß = get_normal(plane)
#     d = get_distance(plane)
#     w = d + ùêß'*inv(ùêÄ‚ÇÅ)*ùêõ‚ÇÅ
#     ùêØ = inv(ùêÄ‚ÇÅ')*ùêß
#     ùêá =  w*ùêÄ + ùêõ*ùêØ'
#     return ùêá
# end

function construct_homography_matrices(camera‚ÇÅ::AbstractCamera, camera‚ÇÇ::AbstractCamera, planes::AbstractVector{<:Plane}, reference_system::AbstractCoordinateSystem)
    ‚Ñã = [HomographyMatrix(construct_homography_matrix(camera‚ÇÅ, camera‚ÇÇ, planes[i], reference_system)) for i = 1:length(planes)]
    return ‚Ñã
end

function construct_homography_matrix(camera‚ÇÅ::AbstractCamera, camera‚ÇÇ::AbstractCamera, plane::Plane, reference_system::AbstractCoordinateSystem)
    model‚ÇÅ = get_model(camera‚ÇÅ)
    model‚ÇÇ = get_model(camera‚ÇÇ)
    image_type‚ÇÅ = get_image_type(camera‚ÇÅ)
    image_system‚ÇÅ = get_coordinate_system(image_type‚ÇÅ)
    image_type‚ÇÇ = get_image_type(camera‚ÇÇ)
    image_system‚ÇÇ = get_coordinate_system(image_type‚ÇÇ)
    construct_homography_matrix(model‚ÇÅ, model‚ÇÇ, plane, reference_system, image_system‚ÇÅ, image_system‚ÇÇ)
end

function construct_homography_matrix(model‚ÇÅ::AbstractCameraModel, model‚ÇÇ::AbstractCameraModel,  plane::Plane,  reference_system::AbstractCoordinateSystem, image_system‚ÇÅ::AbstractPlanarCoordinateSystem, image_system‚ÇÇ::AbstractPlanarCoordinateSystem)
    intrinsics‚ÇÅ = get_intrinsics(model‚ÇÅ)
    ùêä‚ÇÅ = to_matrix(intrinsics‚ÇÅ, image_system‚ÇÅ)
    extrinsics‚ÇÅ = get_extrinsics(model‚ÇÅ)
    ùêë‚ÇÅ‚Ä≤, ùê≠‚ÇÅ‚Ä≤ = ascertain_pose(extrinsics‚ÇÅ, reference_system)
    ùêë‚ÇÅ = transpose(ùêë‚ÇÅ‚Ä≤)
    ùê≠‚ÇÅ = ùê≠‚ÇÅ‚Ä≤
    # Our projection matrix should decompose as [ùêë -ùêë*ùê≠]

    intrinsics‚ÇÇ = get_intrinsics(model‚ÇÇ)
    ùêä‚ÇÇ = to_matrix(intrinsics‚ÇÇ, image_system‚ÇÇ)
    extrinsics‚ÇÇ = get_extrinsics(model‚ÇÇ)
    ùêë‚ÇÇ‚Ä≤, ùê≠‚ÇÇ‚Ä≤ = ascertain_pose(extrinsics‚ÇÇ, reference_system)
    # Our projection matrix should decompose as [ùêë -ùêë*ùê≠]
    ùêë‚ÇÇ = transpose(ùêë‚ÇÇ‚Ä≤)
    ùê≠‚ÇÇ = ùê≠‚ÇÇ‚Ä≤

    # We assume that the plane is given by the vector ùõë =[n -d], where n is the outward
    # normal to the plane and d is the distance from the plane to the origin of the
    # coordinate system.
    ùêß = get_normal(plane)
    d = get_distance(plane)

    ùêÄ = ùêä‚ÇÇ*ùêë‚ÇÇ/ùêë‚ÇÅ/ùêä‚ÇÅ
    ùêõ = ùêä‚ÇÇ*ùêë‚ÇÇ*(ùê≠‚ÇÅ - ùê≠‚ÇÇ)
    w = d - ùêß'*ùê≠‚ÇÅ
    ùêØ = inv(ùêä‚ÇÅ')*ùêë‚ÇÅ*ùêß

    ùêá =  w*ùêÄ + ùêõ*ùêØ'
end
