abstract type AbstractSyntheticScene end
abstract type AbstractSceneParameters end


Base.@kwdef struct SyntheticScene{T‚ÇÅ <: AbstractSceneParameters, T‚ÇÇ <: AbstractWorld, T‚ÇÉ <: AbstractCamera} <: AbstractSyntheticScene
    scene_parameters::T‚ÇÅ
    world::T‚ÇÇ
    cameras::Vector{T‚ÇÉ}
end

function get_scene_parameters(scene::SyntheticScene)
    scene.scene_parameters
end

function get_world(scene::SyntheticScene)
    scene.world
end

function get_cameras(scene::SyntheticScene)
    scene.cameras
end

# function SyntheticScene{T‚ÇÅ,  T‚ÇÇ , T‚ÇÉ}(scene_parameters::T‚ÇÅ) where {T‚ÇÅ <: AbstractSceneParameters, T‚ÇÇ <: AbstractWorld, T‚ÇÉ <: AbstractCamera}
#         image_width = 640
#         image_height = 480
#         f = 400
#
#         pinhole‚ÇÅ = Pinhole(intrinsics = IntrinsicParameters(width = image_width, height = image_height, focal_length = f))
#         analogue_image‚ÇÅ = AnalogueImage(coordinate_system = OpticalSystem())
#         camera‚ÇÅ = ComputerVision.Camera(image_type = analogue_image‚ÇÅ, model = pinhole‚ÇÅ)
#         ùêë‚ÇÅ = SMatrix{3,3,Float64,9}(rotxyz(0*(pi/180), 0*(pi/180), 0*(pi/180)))
#         ùê≠‚ÇÅ = [-100.0, -200.0, 0.0]
#         relocate!(camera‚ÇÅ, ùêë‚ÇÅ, ùê≠‚ÇÅ)
#
#         pinhole‚ÇÇ = Pinhole(intrinsics = IntrinsicParameters(width = image_width, height = image_height, focal_length = f))
#         analogue_image‚ÇÇ = AnalogueImage(coordinate_system = OpticalSystem())
#         camera‚ÇÇ = ComputerVision.Camera(image_type = analogue_image‚ÇÇ, model = pinhole‚ÇÇ)
#         v‚ÇÅ = rand(-10:10)
#         v‚ÇÇ = rand(-10:10)
#         v‚ÇÉ = rand(-10:10)
#         ùêë‚ÇÇ = SMatrix{3,3,Float64,9}(rotxyz(v‚ÇÅ * (pi/180), v‚ÇÇ * (pi/180), v‚ÇÉ * (pi/180)))
#         ùê≠‚ÇÇ = [-200.0, -200.0, -700.0]
#         relocate!(camera‚ÇÇ, ùêë‚ÇÇ, ùê≠‚ÇÇ)
#
#         world = construct_synthetic_scene(scene_parameters, camera‚ÇÅ, camera‚ÇÇ)
#         new(synthetic_scene, world, [camera‚ÇÅ camera‚ÇÇ])
# end

SyntheticScene(scene_parameters::AbstractSceneParameters)  = SyntheticScene(construct_scene(scene_parameters)...)


function construct_scene(scene_parameters::AbstractSceneParameters)
        image_width = 640
        image_height = 480
        f = 400

        pinhole‚ÇÅ = Pinhole(intrinsics = IntrinsicParameters(width = image_width, height = image_height, focal_length = f))
        analogue_image‚ÇÅ = AnalogueImage(coordinate_system = OpticalSystem())
        camera‚ÇÅ = ComputerVision.Camera(image_type = analogue_image‚ÇÅ, model = pinhole‚ÇÅ)
        ùêë‚ÇÅ = SMatrix{3,3,Float64,9}(rotxyz(0*(pi/180), 0*(pi/180), 0*(pi/180)))
        ùê≠‚ÇÅ = [-100.0, -200.0, 0.0]
        relocate!(camera‚ÇÅ, ùêë‚ÇÅ, ùê≠‚ÇÅ)

        pinhole‚ÇÇ = Pinhole(intrinsics = IntrinsicParameters(width = image_width, height = image_height, focal_length = f))
        analogue_image‚ÇÇ = AnalogueImage(coordinate_system = OpticalSystem())
        camera‚ÇÇ = ComputerVision.Camera(image_type = analogue_image‚ÇÇ, model = pinhole‚ÇÇ)
        v‚ÇÅ = rand(-10:10)
        v‚ÇÇ = rand(-10:10)
        v‚ÇÉ = rand(-10:10)
        ùêë‚ÇÇ = SMatrix{3,3,Float64,9}(rotxyz(v‚ÇÅ * (pi/180), v‚ÇÇ * (pi/180), v‚ÇÉ * (pi/180)))
        ùê≠‚ÇÇ = [-200.0, -200.0, -700.0]
        relocate!(camera‚ÇÇ, ùêë‚ÇÇ, ùê≠‚ÇÇ)

        world = construct_synthetic_scene(scene_parameters, camera‚ÇÅ, camera‚ÇÇ)
        return scene_parameters, world, [camera‚ÇÅ, camera‚ÇÇ]
end


Base.@kwdef struct PlanarSceneParameters{T‚ÇÅ <: HyperRectangle, T‚ÇÇ <: Number} <: AbstractSceneParameters
    total_planes::Int = 2
    regions_of_interest::Vector{T‚ÇÅ} = [HyperRectangle(Vec(0.0, 0.0), Vec(50.0, 50.0)), HyperRectangle(Vec(0.0, 0.0), Vec(50.0, 50.0))]
    points_per_region::Vector{T‚ÇÇ} =  [12, 12]
end


function construct_synthetic_scene(scene_type::PlanarSceneParameters, camera‚ÇÅ::AbstractCamera, camera‚ÇÇ::AbstractCamera)
    boxes = scene_type.regions_of_interest
    points_per_region = scene_type.points_per_region
    K =  scene_type.total_planes
    # Here we assume that the instrinsic image width and height for both cameras is the same.
    image_width = get_width(get_intrinsics(get_model(camera‚ÇÅ)))
    image_height = get_width(get_intrinsics(get_model(camera‚ÇÅ)))
    ùêú‚ÇÅ = get_origin(get_extrinsics(get_model(camera‚ÇÅ)))
    ùêú‚ÇÇ = get_origin(get_extrinsics(get_model(camera‚ÇÇ)))
    planes = [generate_random_plane(ùêú‚ÇÅ, ùêú‚ÇÇ) for k = 1:K]
    D = [sample_points_on_random_plane(points_per_region[k], planes[k], image_width, image_height, boxes[k], camera‚ÇÅ, camera‚ÇÇ) for k = 1:K]
    # Determine which set of points correspond to which planar structure
    cummulative = OffsetArray(cumsum(vcat([0],points_per_region)), -1)
    span = [ (cummulative[k-1]+1):cummulative[k] for k = 1:K ]
    intervals = [IntervalAllotment(span[k]) for k = 1:K]
    ùí≥  = collect(Iterators.flatten(D))
    PlanarWorld(; points = ùí≥, groups =  intervals,  planes = planes)
end

function generate_random_plane(ùê≠‚ÇÅ::AbstractVector, ùê≠‚ÇÇ::AbstractVector)
    # Random plane situated in front of both cameras
    v‚ÇÅ = rand(-20:20)
    v‚ÇÇ = rand(-20:20)
    v‚ÇÉ = rand(-20:20)
    v‚ÇÑ = rand(1000:2500)
    ùêë = SMatrix{3,3,Float64,9}(rotxyz(v‚ÇÅ *(pi/180), v‚ÇÇ * (pi/180), v‚ÇÉ *(pi/180)))
    ùêú = (ùê≠‚ÇÅ + ùê≠‚ÇÇ) / 2
    ùêû‚ÇÅ = Vec(1.0, 0.0, 0.0)
    ùêû‚ÇÇ = Vec(0.0, 1.0, 0.0)
    ùêû‚ÇÉ = Vec(0.0, 0.0, 1.0)
    ùêû‚ÇÅ‚Ä≤ = ùêë*ùêû‚ÇÅ
    ùêû‚ÇÇ‚Ä≤ = ùêë*ùêû‚ÇÇ
    ùêû‚ÇÉ‚Ä≤ = ùêë*ùêû‚ÇÉ
    ùê® = ùêú + [0.0, 0.0, v‚ÇÑ]
    EuclideanPlane3D(CartesianSystem(ùê®, ùêû‚ÇÅ‚Ä≤,ùêû‚ÇÇ‚Ä≤,ùêû‚ÇÉ‚Ä≤))
end

function sample_points_on_random_plane(N::Number, plane::EuclideanPlane3D, image_width, image_height, box, camera‚ÇÅ, camera‚ÇÇ)
    # Choose a region of interest with specified size that falls within the
    # image dimensions.
    box_dimensions = widths(box)

    # Keep in mind that the origin is at the center of the image.
    half_width = image_width / 2
    half_height = image_height / 2
    span‚ÇÅ = -half_width:(half_width - box_dimensions[1])
    span‚ÇÇ = -half_height:(half_height - box_dimensions[2])
    i = rand(span‚ÇÅ)
    j = rand(span‚ÇÇ)

    ‚Ñ≥ = [ Point(i + rand(0.0:box_dimensions[1]),j + rand(0.0:box_dimensions[2])) for n = 1:N]
    ‚Ñí = back_project(camera‚ÇÅ, ‚Ñ≥)
    determine_intersection = IntersectionContext()
    ùí≥‚ÇÅ = [determine_intersection(plane, ‚Ñí[n]) for n = 1:N]
end
