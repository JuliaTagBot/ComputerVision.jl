struct Projection{T‚ÇÅ <: AbstractMatrix} <: ProjectiveEntity
    ùêè::T‚ÇÅ
end

function to_matrix(entity::Projection)
    entity.ùêè
end

function matrix(entity::Projection)
    entity.ùêè
end

#Projection(camera::AbstractCamera) = Projection(camera, CartesianSystem(Point(0.0, 0.0, 0.0), Vec(1.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0)))
Projection(camera::AbstractCamera) = Projection(construct_projection(camera, CartesianSystem(Point(0.0, 0.0, 0.0), Vec(1.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0))))


#Projection(model::AbstractCameraModel) = Projection(model, CartesianSystem(Vec(1.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0)), PlanarCartesianSystem(Vec(-1.0, 0.0), Vec(0.0, -1.0)))
#Projection(model::AbstractCameraModel, reference_system::AbstractCoordinateSystem, image_system::AbstractPlanarCoordinateSystem) = Projection(construct_projection(model, reference_system, image_system))

function project(P::Projection, ùí≥::Vector{<: AbstractVector})
    ùêè = to_matrix(P)
    ‚Ñ≥ = map(ùí≥) do ùêó
        ùê¶ = hom‚Åª¬π(ùêè * hom(ùêó))
    end
    return ‚Ñ≥
end

function back_project(camera::AbstractCamera, ‚Ñ≥::Vector{<: AbstractVector})
    extrinsics = get_extrinsics(get_model(camera))
    ùêû‚ÇÅ, ùêû‚ÇÇ, ùêû‚ÇÉ = get_basis_vectors(extrinsics)

    intrinsics  = get_intrinsics(get_model(camera))
    image_type = get_image_type(camera)
    image_system = get_coordinate_system(image_type)
    f = get_focal_length(intrinsics)

    #reference_system = CartesianSystem(Point(0.0, 0.0, 0.0), Vec(1.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0))
    ùê® = get_origin(extrinsics)

    ‚Ñí = map(‚Ñ≥) do ùê¶
        ùê© = ùê® + ùê¶[1] *ùêû‚ÇÅ + ùê¶[2] *ùêû‚ÇÇ + f*ùêû‚ÇÉ
        L = Line3D(ùê®, ùê©)
    end

    return ‚Ñí

    # ùêë, ùê≠ = ascertain_pose(camera, reference_system)
    # ùê¶ = ‚Ñ≥[1]
    # ùê©‚ÇÅ = ùê®
    #
    # ùê©‚ÇÇ = ùê® + ùê¶[1] *ùêû‚ÇÅ + ùê¶[2] *ùêû‚ÇÇ + f*ùêû‚ÇÉ
    # Line3D(ùê®, ùê©‚ÇÇ)

    #ùêä = to_matrix(intrinsics, image_system)
    # P = Projection(camera)
    # ùêè = to_matrix(P)
    # ùêè‚Å∫ = ùêè' * inv(ùêè*ùêè')
    # reference_system = CartesianSystem(Point(0.0, 0.0, 0.0), Vec(1.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0))
    # ùêë, ùê≠ = ascertain_pose(camera, reference_system)
    # #ùêú = SVector(nullspace(ùêè)...)
    # ùê¶ = ‚Ñ≥[1]
    # ùê© = ùêë * inv(ùêä)*hom(ùê¶)
    # #ùê© = hom‚Åª¬π(ùêè‚Å∫ * hom(ùê¶))
    # Line3D(ùê≠, ùê©)

    # ‚Ñí = map(‚Ñ≥) do ùê¶
    #     L = Line3D(ùêú, ùêè‚Å∫ * hom(ùê¶))
    # end
    #return ‚Ñí
end

function construct_projection(camera::AbstractCamera, reference_system::AbstractCoordinateSystem)
    model = get_model(camera)
    image_type = get_image_type(camera)
    image_system = get_coordinate_system(image_type)
    construct_projection(model, reference_system, image_system)
end

function construct_projection(model::AbstractCameraModel, reference_system::AbstractCoordinateSystem, image_system::AbstractPlanarCoordinateSystem)
    intrinsics = get_intrinsics(model)
    extrinsics = get_extrinsics(model)
    ùêä = to_matrix(intrinsics, image_system)
    ùêÑ = to_matrix(extrinsics, reference_system)
    ùêè = ùêä * ùêÑ
end

function to_matrix(intrinsics::IntrinsicParameters, image_system::AbstractPlanarCoordinateSystem)
    f = get_focal_length(intrinsics)
    optical_system = get_coordinate_system(intrinsics)
    ùêû‚ÇÅ = get_e‚ÇÅ(image_system)
    ùêû‚ÇÇ = get_e‚ÇÇ(image_system)
    ùêû‚ÇÅ‚Ä≤ = get_e‚ÇÅ(optical_system)
    ùêû‚ÇÇ‚Ä≤ = get_e‚ÇÇ(optical_system)
    # TODO Fix this so that we don't assume that the principal point is at position (0,0)
    # ùê© = get_principal_point(intrinsics)
    ùê≠ = determine_translation(intrinsics, image_system)
    ùêë = inv(hcat(ùêû‚ÇÅ, ùêû‚ÇÇ)) * hcat(ùêû‚ÇÅ‚Ä≤ , ùêû‚ÇÇ‚Ä≤)
    ùêä = SMatrix{3,3,Float64,9}(f, 0.0, 0.0, 0.0, f, 0.0, 0.0, 0.0 , 1)
    ùêä‚Ä≤ = vcat(hcat(ùêë', -ùêë'*ùê≠), SMatrix{1,3,Float64}(0,0,1)) * ùêä
end

function to_matrix(extrinsics::ExtrinsicParameters, reference_system::CartesianSystem = CartesianSystem(Point(0.0, 0.0, 0.0), Vec(1.0, 0.0, 0.0), Vec(0.0, 1.0, 0.0), Vec(0.0, 0.0, 1.0)))
    ùêë, ùê≠ = ascertain_pose(extrinsics, reference_system)
    ùêÑ = [ùêë' -ùêë'*ùê≠]
end

function ascertain_pose(camera::AbstractCamera, reference_system::CartesianSystem)
    model = get_model(camera)
    ascertain_pose(get_extrinsics(model), reference_system)
end

function ascertain_pose(extrinsics::ExtrinsicParameters, reference_system::CartesianSystem)
    camera_system = get_coordinate_system(extrinsics)
    ùêû‚ÇÅ = get_e‚ÇÅ(reference_system)
    ùêû‚ÇÇ = get_e‚ÇÇ(reference_system)
    ùêû‚ÇÉ = get_e‚ÇÉ(reference_system)
    ùêû‚ÇÅ‚Ä≤ = get_e‚ÇÅ(camera_system)
    ùêû‚ÇÇ‚Ä≤ = get_e‚ÇÇ(camera_system)
    ùêû‚ÇÉ‚Ä≤ = get_e‚ÇÉ(camera_system)
    ùê≠ = get_origin(camera_system) - get_origin(reference_system)
    ùêë = inv(hcat(ùêû‚ÇÅ, ùêû‚ÇÇ, ùêû‚ÇÉ)) * hcat(ùêû‚ÇÅ‚Ä≤, ùêû‚ÇÇ‚Ä≤, ùêû‚ÇÉ‚Ä≤)
    ùêë, ùê≠
end

# TODO Incorporate information about the origin of the image coordinate system
function determine_translation(intrinsics::IntrinsicParameters, system::PlanarCartesianSystem)
    width = get_width(intrinsics)
    height = get_height(intrinsics)
    ùê≠ = Point(-width / 2, height / 2)
end

function determine_translation(intrinsics::IntrinsicParameters, system::OpticalSystem)
    ùê≠ = Point(0, 0)
end

function determine_translation(intrinsics::IntrinsicParameters, system::RasterSystem)
    width = get_width(intrinsics)
    height = get_height(intrinsics)
    ùê≠ = Point(-width / 2, -height / 2)
end
